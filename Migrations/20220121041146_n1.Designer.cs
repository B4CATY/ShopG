// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopG.Entities;

namespace ShopG.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20220121041146_n1")]
    partial class n1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Russian_Russia.1251")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ShopG.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Login")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Login" }, "account_login_key")
                        .IsUnique();

                    b.ToTable("account");
                });

            modelBuilder.Entity("ShopG.Entities.CardProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Cardid")
                        .HasColumnType("integer")
                        .HasColumnName("cardid");

                    b.Property<int?>("Productid")
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    b.HasKey("Id");

                    b.HasIndex("Cardid");

                    b.HasIndex("Productid");

                    b.ToTable("card_product");
                });

            modelBuilder.Entity("ShopG.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnType("integer")
                        .HasColumnName("accountid");

                    b.HasKey("Id");

                    b.HasIndex("Accountid");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("ShopG.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("ShopG.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Categoryid")
                        .HasColumnType("integer")
                        .HasColumnName("categoryid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("NameProduct")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name_product");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("Categoryid");

                    b.HasIndex(new[] { "NameProduct" }, "product_name_key")
                        .IsUnique();

                    b.ToTable("product");
                });

            modelBuilder.Entity("ShopG.Entities.CardProduct", b =>
                {
                    b.HasOne("ShopG.Entities.Cart", "Card")
                        .WithMany("CardProducts")
                        .HasForeignKey("Cardid")
                        .HasConstraintName("card_product_cardid_fkey");

                    b.HasOne("ShopG.Entities.Product", "Product")
                        .WithMany("CardProducts")
                        .HasForeignKey("Productid")
                        .HasConstraintName("card_product_productid_fkey");

                    b.Navigation("Card");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopG.Entities.Cart", b =>
                {
                    b.HasOne("ShopG.Entities.Account", "Account")
                        .WithMany("Carts")
                        .HasForeignKey("Accountid")
                        .HasConstraintName("cart_accountid_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ShopG.Entities.Product", b =>
                {
                    b.HasOne("ShopG.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Categoryid")
                        .HasConstraintName("product_catagoryid_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopG.Entities.Account", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("ShopG.Entities.Cart", b =>
                {
                    b.Navigation("CardProducts");
                });

            modelBuilder.Entity("ShopG.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopG.Entities.Product", b =>
                {
                    b.Navigation("CardProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
